import serial 
import syslog
import time
import serial
import argparse
#import numpy as np
import sys,tty,termios
import signal 

#The following line is for serial over GPIO
port = '/dev/ttyACM0' # note I'm using Mac OS-X
ard = serial.Serial(port,9600,timeout=5)
time.sleep(2) # wait for Arduino
f=open('calibration', 'a')
cond = 0	# Default value is 0


def sendtoard():
    for i in range(2):
        time.sleep(2)
        
	# Every single digit to each motor should be 3 digits long
	# therefore  Keerthana has initialised the 0 as 100, which
	# explains why -355 in arduino code
	for j in range(100, 712, 1):
            ard.flush()            
            val1 = str( format(int(j), '03d') )
            val2 = str( format(int(j), '03d') )
	
            ard.write((val1+val2).encode('utf-8'))        
            time.sleep(1) # I shortened this to match the new value in your Arduino code
            
	    # Serial read section
            msg = ard.read(ard.inWaiting()) # read all characters in buffer        
            msg=msg.decode("utf-8") 
            if not msg.isspace():
                print(j)
                print (msg)
                f.write('\n')
                f.write(msg)
            time.sleep(0.2)

class _Getch:
    def __call__(self):
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(3)
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            return ch
def get():
        inkey = _Getch()
        while(1):
                k=inkey()
                if k!='':break
        if k=='\x1b[A':
                print "up"
        elif k=='\x1b[B':
                print "down"
        elif k=='\x1b[C':
                print "right"
        elif k=='\x1b[D':
                print "left"
        else:
                print "not an arrow key!"

def main():
        for i in range(0,20):
                get()


def override():
	
if __name__ == "__main__":
	
	try:
		sendtoard()
	except KeyboardInterrupt:
		print ('Interrupted')
		main()
	f.close()

